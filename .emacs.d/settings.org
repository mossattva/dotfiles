#+TITLE: Emacs settings
* Package Management
#+begin_src emacs-lisp

#+end_src
* Base settings
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq browse-url-firefox-arguments '("--new-tab"))
  (setq browse-url-browser-function 'browse-url-firefox)
  #+end_src
* Theming
** Text and Input settings
#+begin_src emacs-lisp
  (set-language-environment  "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (setq-default cursor-type 'bar)
  (delete-selection-mode t)
  (setq-default fill-column 80)
#+end_src
** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Iosevka"
  		    :height 140
                      :weight 'normal
                      :width 'normal)

  (set-face-attribute 'variable-pitch nil
  		    :family "Iosevka Etoile")

  (use-package ligature
    :config
    ;; Enable the www ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
      ;; Enable ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
    (global-ligature-mode 't))
#+end_src
** Icons
*** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
*** nerd-icons
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src
** Colorscheme
#+begin_src emacs-lisp
  ;; (use-package oldlace-theme)
  ;; (use-package organic-green-theme)
  (use-package pastelmac-theme
    :ensure (:wait t))
  ;; (use-package poet-theme)
  ;; (use-package plan9-theme)
  ;;  (use-package rimero-theme)
  ;; (use-package silkworm-theme)
  ;; (use-package creamsody-theme)
  ;; (use-package mellow-theme)
  ;; (use-package white-sand-theme
  ;;   :ensure (:wait t))

  (use-package modus-themes)

  (load-theme 'modus-operandi-tinted)

  ;; (load-theme 'pastelmac t)
  ;; (enable-theme 'pastelmac)
#+end_src
* File behavior
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq create-lock-files nil)
  (global-auto-revert-mode)
#+end_src
* Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-buffer-encoding nil)
    :init
    (doom-modeline-mode))

  (setq mode-line-right-align-edge 'right-fringe)
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package transient :ensure t :demand t)
  (use-package magit :ensure t :demand t)
#+end_src
* org
** org-mode
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :config
    (setq org-directory "~/org")
    (setq archive-location "~/org/archive.org::* From %s")
    (setq org-complete-tags-always-offer-all-agenda-tags t)
    (defun org-config-fill-prefix ()
      "Set `fill-prefix' to the empty string."
      (setq fill-prefix ""))
    (add-hook 'org-mode-hook #'org-config-fill-prefix)
    (setq org-todo-keywords
  	(quote ((sequence "TODO(t)" "PROJECT(p)" "WAITING(w)""|" "DONE(d)"))))
    (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm))

#+end_src
** org-agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :bind
    ("C-c a" . org-agenda)
    :config
    (setq org-modules '(org-habit)))

  (setq org-agenda-file-to-front '("/home/mossheart/org/syllabus.org"
  				 "/home/mossheart/org/inbox.org"
  				 "/home/mossheart/org/schedule.org"))

  (setq org-agenda-span 'day)

  (setq org-agenda-custom-commands
        '(("D" "Daily"
  	 ((agenda "")
  	  (todo "PROJECT"
  		((org-agenda-overriding-header "Projects")
  		 (org-agenda-files '("~/org/main.org"))))
  	  (tags-todo "@daily"
  		((org-agenda-overriding-header "Dailies")
  		 (org-agenda-files '("~/org/main.org"))))))
  	("C" "C Tasks"
  	 ((tags "C"
  		((org-agenda-overriding-header "C Tasks")))))
  	("I" "Inbox"
  	 ((todo "TODO" ((org-agenda-files '("~/org/inbox.org"))))))))
#+end_src
** org-capture
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :defer 1
  :bind
  ("C-c c" . org-capture))
#+end_src
*** capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file"~/org/inbox.org")
                                 "* TODO %i%?")
  			      ("b" "Bookmark" entry
  			       (file " ~/org/bookmarks.org")
  			       "* %i%?")))
#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (set-face-attribute 'org-modern-symbol nil
    		      :family "Iosevka")
    (global-org-modern-mode))


#+end_src
* ivy
#+begin_src emacs-lisp
  (use-package ivy
    :init
    (ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-height 10
          ivy-count-format ""
          ivy-initial-inputs-alist nil
          ivy-re-builders-alist
          '((t . ivy--regex-ignore-order)))

    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-x d") 'counsel-dired)
    (global-set-key (kbd "C-c i") 'counsel-imenu)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

  (use-package counsel)
  (use-package swiper)
#+end_src
* ivy-hydra
#+begin_src emacs-lisp
  (use-package ivy-hydra)
#+end_src
* Icons
* SLIME
#+begin_src emacs-lisp
    (setq inferior-lisp-program "ros -Q run")
    (load (expand-file-name "~/.roswell/helper.el"))
    (use-package slime
      :ensure (:wait t))
#+end_src
* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src
* company-mode
#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-backends '((company-capf company-dabbrev-code)))
    (add-hook 'elpaca-after-init-hook 'global-company-mode))
  (use-package slime-company
    :after (slime company)
    :config
    (slime-setup '(slime-company)))
#+end_src
* Document Reading
** pdfs
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (pdf-tools-install))

  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))

  (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")

  (use-package toc-mode)
#+end_src
** EPUBs
#+begin_src emacs-lisp
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
* paredit
#+begin_src emacs-lisp
  (use-package paredit
    :hook
    ((clojure-mode-hook . enable-paredit-mode)
     (clojurec-mode-hook . enable-paredit-mode)
     (clojurescript-mode-hook . enable-paredit-mode)
     (emacs-lisp-mode . enable-paredit-mode)))
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
#+end_src
* Clojure
#+begin_src emacs-lisp
  (use-package clojure-mode)
  (use-package cider)
#+end_src
* lsp
#+begin_src emacs-lisp
  (use-package ccls)

  (use-package lsp-mode
    :ensure t
    :hook ((clojure-mode . lsp)
           (clojurec-mode . lsp)
           (clojurescript-mode . lsp)
  	 (c-mode . lsp)
  	 (c++-mode . lsp))
    :config
    (add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
    (add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))
    ;; add paths to your local installation of project mgmt tools, like lein
    (setenv "PATH" (concat
                     "/usr/local/bin" path-separator
                     (getenv "PATH")))
    (dolist (m '(clojure-mode
                 clojurec-mode
                 clojurescript-mode
                 clojurex-mode))
      (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
    (setq lsp-clojure-server-command '("/home/nora/opt/clojure-lsp")))
#+end_src
* COMMENT Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook
    (java-mode-hook . lsp))
#+end_src
* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :bind
    ("C-q" . vterm-send-next-key))
  #+end_src
* treemacs
#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src
* C
#+begin_src emacs-lisp
  (defun my-c-mode-common-hook ()
   ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
   (c-set-offset 'substatement-open 0)
   ;; other customizations can go here

   (setq c++-tab-always-indent t)
   (setq c-basic-offset 4)                  ;; Default is 2
   (setq c-indent-level 4)                  ;; Default is 2

   (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
   (setq tab-width 4)
   (setq indent-tabs-mode t)  ; use spaces only if nil
  )

  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src
